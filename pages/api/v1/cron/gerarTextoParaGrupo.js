import consultaBd from '../webhook/database';
import { OpenAI } from 'openai';

export default async function handler(req, res) {
  try {
    // busca 1 produto sem texto_para_grupo
    const registro = await consultaBd('buscarAfiliacaoSemTexto');

    if (!registro) {
      return res.status(200).json({ message: 'Nenhuma afiliacao pendente.' });
    }

    if (!process.env.CHAVE_GPT) {
      return res.status(500).json({ error: 'CHAVE_GPT n√£o configurada' });
    }

    const openai = new OpenAI({ apiKey: process.env.CHAVE_GPT });
    const linkCurto =  `${registro.landingpage}${registro.codigo_curto}`;

    const prompt = `
      Gere um texto de venda emp√°tico e atrativo o modelo abaixo tem que ser curtos. 
      Use emojis.
      O nome deve aparecer apenas no Titulo, no resto n√£o pode aparecer o nome
      Estrutura:
      [TITULO = NOME]
      [QUEBRA GELO] <-- aqui n√£o repita o nome do produto 
      [VALOR]

      Siga o modelo abaixo:
      üëï‚ú® *Kit 5 Bodies Manga Curta*

      Mam√£e, sabe aquele body que veste f√°cil, leve, fresquinho ?
      Esse em suedine 100% algod√£o √© exatamente isso.

      üí∞ *R$ 29,00*      
      
      Agora crie um texto para este produto:

      ${JSON.stringify({
        nome: registro.nome,
        descricao: registro.descricao,
        preco: registro.preco,
        frete: registro.frete,
      }, null, 2)}
      N√£o deve conter mais nenhum texto abaixo
      `;

    const gptResponse = await openai.chat.completions.create({
      model: 'gpt-3.5-turbo',
      messages: [{ role: 'user', content: prompt }],
    });

 
    const textoBruto = gptResponse.choices?.[0]?.message?.content?.trim();

    const textoFrete = [
    '(üöö Aqui consegui *frete gr√°tis*)',
    '(üéâ Deu *frete gr√°tis* pra mim!)',
    '(üõçÔ∏è Aqui apareceu com *frete gr√°tis*)',
    '(üì¶ Deu *frete gr√°tis* aqui!)',
    '(üí∏ Olha s√≥, aqui rolou *frete gr√°tis*!)'
    ];

    const textosFinais = [
      'üïê Oferta por tempo limitado!',
      'üö® Enquanto durar o estoque!',
      '‚è≥ Aproveite antes que acabe...',
      'üî• √öltimas unidades! N√£o perca essa oportunidade.',
      'üïê Corre que t√° saindo r√°pido!',
    ];
    
    const aleatorio = textosFinais[Math.floor(Math.random() * textosFinais.length)];    
    const aleatorio2 = textoFrete[Math.floor(Math.random() * textoFrete.length)];

    const textoFinal = `${textoBruto}\n${aleatorio2}\n\n${linkCurto}\n\n${aleatorio}`;

    if (textoFinal) {
      await consultaBd('salvarTextoParaGrupo', { id: registro.id, texto: textoFinal });
    }

    return res.status(200).json({ id: registro.id, texto: textoFinal });
  } catch (error) {
    console.error('Erro no cron gerarTextoParaGrupo:', error);
    return res.status(500).json({ error: error.message });
  }
}

